{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NAUTI NAUTI (Network Automation Tools Integrator) is a CLI application that leverages an ecosystem of libraries built around asyncio that together can be used to support various network automation workflows. The key features include: Compare : The ability to compare network automation tools Reconcile : NAUTI can be used to reconcile information between network automation tools Diffs : Show differences between network automation tools Quick Overview Within this quick example the CLI can be used to sync devices from IPFabric (Network Discovery Tool) to Netbox (Network DCIM/IPAM). The following command checks if there are any differences between the origin and target filtering out only one device. By default the command line nauti sync will run in dry-run mode. $ nauti sync --origin ipfabric --target netbox --collection devices --origin-filter \"hostname ~ b15\" 2021 -01-04 19 :16:57,473 INFO: Fetching ipfabric/devices collection ... 2021 -01-04 19 :16:57,489 INFO: Fetched ipfabric/devices, fetched 1 records. 2021 -01-04 19 :16:57,489 INFO: Fetching netbox/devices collection ... 2021 -01-04 19 :16:58,690 INFO: Fetched netbox/devices, fetched 627 records. Diff Report Add items: count 0 Remove items: count 477 Update items: count 1 You can show a more detailed output by adding the --diff-report/--dr command line argument. $ nauti sync --origin ipfabric --target netbox --collection devices --origin-filter \"hostname ~ b15\" --diff-report upd 2021 -01-04 19 :20:44,276 INFO: Fetching ipfabric/devices collection ... 2021 -01-04 19 :20:44,300 INFO: Fetched ipfabric/devices, fetched 1 records. 2021 -01-04 19 :20:44,300 INFO: Fetching netbox/devices collection ... 2021 -01-04 19 :20:45,821 INFO: Fetched netbox/devices, fetched 627 records. Diff Report Add items: count 0 Remove items: count 477 Update items: count 1 -------------------------------------------------------------------------------- Update Items: 1 -------------------------------------------------------------------------------- sn hostname ipaddr site os_name vendor model status ------------ ------------------- ------------ ----------- --------- -------- ---------- -------- BP1234567123 tor-mgmt-ex4200-b15 192 .168.3.35 Axians--lab junos juniper ex4200 active ex4200-b15 Axians Lab ex4200-48t Requirements Python 3.8+ License This project is licensed under the terms of the GNU General Public License v3.0 .","title":"Home"},{"location":"#welcome-to-nauti","text":"NAUTI (Network Automation Tools Integrator) is a CLI application that leverages an ecosystem of libraries built around asyncio that together can be used to support various network automation workflows. The key features include: Compare : The ability to compare network automation tools Reconcile : NAUTI can be used to reconcile information between network automation tools Diffs : Show differences between network automation tools","title":"Welcome to NAUTI"},{"location":"#quick-overview","text":"Within this quick example the CLI can be used to sync devices from IPFabric (Network Discovery Tool) to Netbox (Network DCIM/IPAM). The following command checks if there are any differences between the origin and target filtering out only one device. By default the command line nauti sync will run in dry-run mode. $ nauti sync --origin ipfabric --target netbox --collection devices --origin-filter \"hostname ~ b15\" 2021 -01-04 19 :16:57,473 INFO: Fetching ipfabric/devices collection ... 2021 -01-04 19 :16:57,489 INFO: Fetched ipfabric/devices, fetched 1 records. 2021 -01-04 19 :16:57,489 INFO: Fetching netbox/devices collection ... 2021 -01-04 19 :16:58,690 INFO: Fetched netbox/devices, fetched 627 records. Diff Report Add items: count 0 Remove items: count 477 Update items: count 1 You can show a more detailed output by adding the --diff-report/--dr command line argument. $ nauti sync --origin ipfabric --target netbox --collection devices --origin-filter \"hostname ~ b15\" --diff-report upd 2021 -01-04 19 :20:44,276 INFO: Fetching ipfabric/devices collection ... 2021 -01-04 19 :20:44,300 INFO: Fetched ipfabric/devices, fetched 1 records. 2021 -01-04 19 :20:44,300 INFO: Fetching netbox/devices collection ... 2021 -01-04 19 :20:45,821 INFO: Fetched netbox/devices, fetched 627 records. Diff Report Add items: count 0 Remove items: count 477 Update items: count 1 -------------------------------------------------------------------------------- Update Items: 1 -------------------------------------------------------------------------------- sn hostname ipaddr site os_name vendor model status ------------ ------------------- ------------ ----------- --------- -------- ---------- -------- BP1234567123 tor-mgmt-ex4200-b15 192 .168.3.35 Axians--lab junos juniper ex4200 active ex4200-b15 Axians Lab ex4200-48t","title":"Quick Overview"},{"location":"#requirements","text":"Python 3.8+","title":"Requirements"},{"location":"#license","text":"This project is licensed under the terms of the GNU General Public License v3.0 .","title":"License"},{"location":"architecture/","text":"Architecture NAUTI has three key components. NAUTI Core NAUTI Sources NAUTI Collections NAUTI Core NAUTI Core is the core library which glues all of the other components together. The library contains the core functionality such as the CLI entrypoint and collection models. NAUTI Sources NAUTI Sources define the Network Automation Tools in which NAUTI will use for gathering and reconciling information between systems. An example of a NAUTI Source could be IPFabric , NetBox and many more. Currently Implemented: IPFabric NetBox ClearPass Configuration Parameters NAUTI Sources require a configuration file. The configuration is typically <nauti-source>.toml such as ipfabric.toml . Each configuration can contain a number of parameters. Type Description default Contains source information such as url , credentials and options vars Any variables to be passed to the source expands Expand items such as \"Et\" to \"Ethernet\" maps Maps one value to another value Note: default url and credentials accepts environment variables to prevent storing sensitive information within plain text files. url , credentials and vars supports using environment variables within the configuration: [netbox.default] url = \"$NETBOX_ADDR\" credentials . token = \"$NETBOX_TOKEN\" NAUTI Collections NAUTI Collections are components of a network that are similar between different tools. For example a collection can be defined as a Device, Interface, PortChannel, Site and more. Each collection type is modeled within NAUTI Core. An example device data model contains the following: Hostname Serial Number IP Address Site OS Name Vendor Model These collection models can be used within a NAUTI Source to gather information and translate it to the NAUTI Collection data model. This allows the data model to be used by a target NAUTI Source to add, update or delete records. Implemented Collection Models Name Fields Keys devices sn, hostname, ipaddr, site, os_name, vendor, model sn interfaces hostname, interface, description hostname, interface ipaddrs hostname, ipaddr, interface hostname, ipaddr portchans hostname, interface, portchan hostname, interface sites name name Configuration Parameters NAUTI Collections require a configuration file. The configuration is typically <nauti-collection>.toml such as devices.toml . This configuration can contain a number of parameters. Type Description name Name of the collection fields Allows for the filtering of collection model fields sources Allows for additional settings to be passed into a collection for a specific source options Optional parameters to pass into a collection","title":"Architecture"},{"location":"architecture/#architecture","text":"NAUTI has three key components. NAUTI Core NAUTI Sources NAUTI Collections","title":"Architecture"},{"location":"architecture/#nauti-core","text":"NAUTI Core is the core library which glues all of the other components together. The library contains the core functionality such as the CLI entrypoint and collection models.","title":"NAUTI Core"},{"location":"architecture/#nauti-sources","text":"NAUTI Sources define the Network Automation Tools in which NAUTI will use for gathering and reconciling information between systems. An example of a NAUTI Source could be IPFabric , NetBox and many more. Currently Implemented: IPFabric NetBox ClearPass","title":"NAUTI Sources"},{"location":"architecture/#configuration-parameters","text":"NAUTI Sources require a configuration file. The configuration is typically <nauti-source>.toml such as ipfabric.toml . Each configuration can contain a number of parameters. Type Description default Contains source information such as url , credentials and options vars Any variables to be passed to the source expands Expand items such as \"Et\" to \"Ethernet\" maps Maps one value to another value Note: default url and credentials accepts environment variables to prevent storing sensitive information within plain text files. url , credentials and vars supports using environment variables within the configuration: [netbox.default] url = \"$NETBOX_ADDR\" credentials . token = \"$NETBOX_TOKEN\"","title":"Configuration Parameters"},{"location":"architecture/#nauti-collections","text":"NAUTI Collections are components of a network that are similar between different tools. For example a collection can be defined as a Device, Interface, PortChannel, Site and more. Each collection type is modeled within NAUTI Core. An example device data model contains the following: Hostname Serial Number IP Address Site OS Name Vendor Model These collection models can be used within a NAUTI Source to gather information and translate it to the NAUTI Collection data model. This allows the data model to be used by a target NAUTI Source to add, update or delete records.","title":"NAUTI Collections"},{"location":"architecture/#implemented-collection-models","text":"Name Fields Keys devices sn, hostname, ipaddr, site, os_name, vendor, model sn interfaces hostname, interface, description hostname, interface ipaddrs hostname, ipaddr, interface hostname, ipaddr portchans hostname, interface, portchan hostname, interface sites name name","title":"Implemented Collection Models"},{"location":"architecture/#configuration-parameters_1","text":"NAUTI Collections require a configuration file. The configuration is typically <nauti-collection>.toml such as devices.toml . This configuration can contain a number of parameters. Type Description name Name of the collection fields Allows for the filtering of collection model fields sources Allows for additional settings to be passed into a collection for a specific source options Optional parameters to pass into a collection","title":"Configuration Parameters"},{"location":"contributing/","text":"Contributing Contributions to the NAUTI documentation is welcome. Please create a standard pull request to main . Contribution guidelines may change if the project gets larger. Fork the Repo Firstly fork the official git repository $ git clone https://github.com/<youraccount>/nauti-docs.git Cloning into 'nauti-docs' ... remote: Enumerating objects: 180 , done . remote: Counting objects: 100 % ( 180 /180 ) , done . remote: Compressing objects: 100 % ( 107 /107 ) , done . remote: Total 180 ( delta 53 ) , reused 165 ( delta 44 ) , pack-reused 0 Receiving objects: 100 % ( 180 /180 ) , 361 .22 KiB | 1 .43 MiB/s, done . Resolving deltas: 100 % ( 53 /53 ) , done . Please base your pull requests from main. Create a Python Virtual Environment A virtual environment enables the projects dependencies to be installed independently of other Python projects. Create a virtual environment using the venv Python module: $ python3 -m venv venv $ source venv/bin/activate Install Dependencies Once the virtual environment is activated. The projects dependencies can be installed using the pip module. ( venv ) $ pip install -r requirements-develop.txt Enable Pre-Commit Hooks The NAUTI documentation ships with pre-commit scripts to enforce compliance and more. ( venv ) $ pre-commit install pre-commit installed at .git/hooks/pre-commit Development Server The development environment can be viewed locally to show your changes to the documentation. ( venv ) $ mkdocs serve Once running it should be available at http://127.0.0.1:8000 .","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions to the NAUTI documentation is welcome. Please create a standard pull request to main . Contribution guidelines may change if the project gets larger.","title":"Contributing"},{"location":"contributing/#fork-the-repo","text":"Firstly fork the official git repository $ git clone https://github.com/<youraccount>/nauti-docs.git Cloning into 'nauti-docs' ... remote: Enumerating objects: 180 , done . remote: Counting objects: 100 % ( 180 /180 ) , done . remote: Compressing objects: 100 % ( 107 /107 ) , done . remote: Total 180 ( delta 53 ) , reused 165 ( delta 44 ) , pack-reused 0 Receiving objects: 100 % ( 180 /180 ) , 361 .22 KiB | 1 .43 MiB/s, done . Resolving deltas: 100 % ( 53 /53 ) , done . Please base your pull requests from main.","title":"Fork the Repo"},{"location":"contributing/#create-a-python-virtual-environment","text":"A virtual environment enables the projects dependencies to be installed independently of other Python projects. Create a virtual environment using the venv Python module: $ python3 -m venv venv $ source venv/bin/activate","title":"Create a Python Virtual Environment"},{"location":"contributing/#install-dependencies","text":"Once the virtual environment is activated. The projects dependencies can be installed using the pip module. ( venv ) $ pip install -r requirements-develop.txt","title":"Install Dependencies"},{"location":"contributing/#enable-pre-commit-hooks","text":"The NAUTI documentation ships with pre-commit scripts to enforce compliance and more. ( venv ) $ pre-commit install pre-commit installed at .git/hooks/pre-commit","title":"Enable Pre-Commit Hooks"},{"location":"contributing/#development-server","text":"The development environment can be viewed locally to show your changes to the documentation. ( venv ) $ mkdocs serve Once running it should be available at http://127.0.0.1:8000 .","title":"Development Server"},{"location":"installation/","text":"Installation Installing NAUTI requires the installation of NAUTI Core and required NAUTI Sources. With pip $ pip install git+https://github.com/nauti-netdev/nauti $ pip install git+https://github.com/nauti-netdev/nauti-ipfabric $ pip install git+https://github.com/nauti-netdev/nauti-netbox Configuration NAUTI requires configuration file defined in TOML. Parameters Key Type Required Description domain_names: List False Network Domain Names sources Dictionary True NAUTI Sources to use collections Dictionary True Collections to use Create the nauti.toml file. $ vi nauti.toml Define NAUTI Configuration domain_names = [] sources = ['ipfabric', 'netbox'] collections = ['sites', 'devices']","title":"Installation"},{"location":"installation/#installation","text":"Installing NAUTI requires the installation of NAUTI Core and required NAUTI Sources.","title":"Installation"},{"location":"installation/#with-pip","text":"$ pip install git+https://github.com/nauti-netdev/nauti $ pip install git+https://github.com/nauti-netdev/nauti-ipfabric $ pip install git+https://github.com/nauti-netdev/nauti-netbox","title":"With pip"},{"location":"installation/#configuration","text":"NAUTI requires configuration file defined in TOML.","title":"Configuration"},{"location":"installation/#parameters","text":"Key Type Required Description domain_names: List False Network Domain Names sources Dictionary True NAUTI Sources to use collections Dictionary True Collections to use Create the nauti.toml file. $ vi nauti.toml Define NAUTI Configuration domain_names = [] sources = ['ipfabric', 'netbox'] collections = ['sites', 'devices']","title":"Parameters"},{"location":"advanced/filters/","text":"Custom Filters Nauti has the functionality to filter origin and target sources through custom python plugins. Nauti enables filtering though using an Auditor decorator that exposes several functions to filter origin and target collections. To create a custom filter create a plugins folder within the nauti configuration directory and create a python containing the custom Auditor classes. Auditor When a custom filter has been declared by using the Auditor class decorator it is automatically imported into the Nauti project there are also functions that can be used to easily filter devices. Register The register decorator can accept four values: Key Description Required origin The origin application to apply the filter to. True target The target application to apply the filter to. True collection The collection the filter is to be applied. True name A custom name for the filter False For the filter to be applied the CLI command must match the order in which the custom filter is configured. For example the following python code would match from nauti.auditor import Auditor @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevices ( Auditor ): $ nauti sync --origin ipfabric --target netbox --collection devices The class requires two values to be defined within fields and key_fields . Both variables require a list/tuple, these values are the fields and keys to filter on from the collections. @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,) Functions There are a number of functions that are available within the class that can be overwritten to inject custom filter logic. Function Description origin_fetch_filter Returns a source specific fetch filter for the origin source origin_key_filter Returns bool if the given item fields should be included in the key formation target_fetch_filter Returns a source specific fetch filter for the target source target_key_filter Return bool if the given item fields should be included in the key formation Fetch Filter A fetch filter is a source specific filter for the origin/target source. For example the nauti-netbox source will take a JSON payload to apply to the Netbox API call. { 'pla tf orm__ n ' : ' null ' , 'has_primary_ip' : ' true ' } This JSON payload will be applied to the Netbox API calls and will only show devices with a platform and primary IP address configured. The key filter allows python logic to be applied and filter out key values. Item is passed into the function which contains a single collection item. To filter out a collection item simply return False and to match a collection item return True. @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,) def origin_key_filter ( self , item : dict ) -> bool : if item [ 'os_name' ] == 'junos' : return False return True This example will filter out IPFabric devices that have the os_name of junos by returning False and allow everything else by returning True . Output Using the following configuration: @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,) def origin_key_filter ( self , item : dict ) -> bool : if item [ 'os_name' ] == 'junos' : return False return True The following output shows that only the non junos platforms will be added Netbox. $ nauti sync --origin ipfabric --target netbox --collection devices --diff-report add 2021 -01-17 00 :43:12,170 INFO: Fetching ipfabric/devices collection ... 2021 -01-17 00 :43:12,189 INFO: Fetched ipfabric/devices, fetched 16 records. 2021 -01-17 00 :43:12,190 INFO: Fetching netbox/devices collection ... 2021 -01-17 00 :43:13,578 INFO: Fetched netbox/devices, fetched 628 records. Diff Report Add items: count 2 Remove items: count 478 Update items: count 0 -------------------------------------------------------------------------------- Add Items: 2 -------------------------------------------------------------------------------- sn hostname ipaddr site os_name vendor model ----------- -------------- ------------- ---------- --------- -------- ----------- 1234 nexus-switch-b 192 .168.3.144 Axians Lab nx-os cisco N5K-C5548UP 1234 nexus-switch-a 192 .168.3.143 Axians Lab nx-os cisco N5K-C5548UP","title":"Custom Filters"},{"location":"advanced/filters/#custom-filters","text":"Nauti has the functionality to filter origin and target sources through custom python plugins. Nauti enables filtering though using an Auditor decorator that exposes several functions to filter origin and target collections. To create a custom filter create a plugins folder within the nauti configuration directory and create a python containing the custom Auditor classes.","title":"Custom Filters"},{"location":"advanced/filters/#auditor","text":"When a custom filter has been declared by using the Auditor class decorator it is automatically imported into the Nauti project there are also functions that can be used to easily filter devices.","title":"Auditor"},{"location":"advanced/filters/#register","text":"The register decorator can accept four values: Key Description Required origin The origin application to apply the filter to. True target The target application to apply the filter to. True collection The collection the filter is to be applied. True name A custom name for the filter False For the filter to be applied the CLI command must match the order in which the custom filter is configured. For example the following python code would match from nauti.auditor import Auditor @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevices ( Auditor ): $ nauti sync --origin ipfabric --target netbox --collection devices The class requires two values to be defined within fields and key_fields . Both variables require a list/tuple, these values are the fields and keys to filter on from the collections. @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,)","title":"Register"},{"location":"advanced/filters/#functions","text":"There are a number of functions that are available within the class that can be overwritten to inject custom filter logic. Function Description origin_fetch_filter Returns a source specific fetch filter for the origin source origin_key_filter Returns bool if the given item fields should be included in the key formation target_fetch_filter Returns a source specific fetch filter for the target source target_key_filter Return bool if the given item fields should be included in the key formation","title":"Functions"},{"location":"advanced/filters/#fetch-filter","text":"A fetch filter is a source specific filter for the origin/target source. For example the nauti-netbox source will take a JSON payload to apply to the Netbox API call. { 'pla tf orm__ n ' : ' null ' , 'has_primary_ip' : ' true ' } This JSON payload will be applied to the Netbox API calls and will only show devices with a platform and primary IP address configured. The key filter allows python logic to be applied and filter out key values. Item is passed into the function which contains a single collection item. To filter out a collection item simply return False and to match a collection item return True. @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,) def origin_key_filter ( self , item : dict ) -> bool : if item [ 'os_name' ] == 'junos' : return False return True This example will filter out IPFabric devices that have the os_name of junos by returning False and allow everything else by returning True .","title":"Fetch Filter"},{"location":"advanced/filters/#output","text":"Using the following configuration: @Auditor . register ( 'ipfabric' , 'netbox' , 'devices' ) class IPF2NBDevicesAuditor ( Auditor ): fields = [ 'hostname' , 'os_name' ] key = ( 'hostname' ,) def origin_key_filter ( self , item : dict ) -> bool : if item [ 'os_name' ] == 'junos' : return False return True The following output shows that only the non junos platforms will be added Netbox. $ nauti sync --origin ipfabric --target netbox --collection devices --diff-report add 2021 -01-17 00 :43:12,170 INFO: Fetching ipfabric/devices collection ... 2021 -01-17 00 :43:12,189 INFO: Fetched ipfabric/devices, fetched 16 records. 2021 -01-17 00 :43:12,190 INFO: Fetching netbox/devices collection ... 2021 -01-17 00 :43:13,578 INFO: Fetched netbox/devices, fetched 628 records. Diff Report Add items: count 2 Remove items: count 478 Update items: count 0 -------------------------------------------------------------------------------- Add Items: 2 -------------------------------------------------------------------------------- sn hostname ipaddr site os_name vendor model ----------- -------------- ------------- ---------- --------- -------- ----------- 1234 nexus-switch-b 192 .168.3.144 Axians Lab nx-os cisco N5K-C5548UP 1234 nexus-switch-a 192 .168.3.143 Axians Lab nx-os cisco N5K-C5548UP","title":"Output"},{"location":"sources/nauti-clearpass/","text":"NAUTI ClearPass Aruba ClearPass is a policy management platform that allows for network access control. NAUTI Collection Model Compatibility Name Fetch Add Update Delete devices Configuration As mentioned within Architecture the nauti-clearpass package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [clearpass.default] url = \"$CLEARPASS_ADDR\" credentials . client_id = \"$CLEARPASS_CLIENT_ID\" credentials . client_secret = \"$CLEARPASS_CLIENT_SECRET\" options . timeout = 60 [clearpass.vars] tacacs_secret = \"$TACACS_SECRET\" Source Code : https://github.com/nauti-netdev/nauti-clearpass","title":"nauti-clearpass"},{"location":"sources/nauti-clearpass/#nauti-clearpass","text":"Aruba ClearPass is a policy management platform that allows for network access control.","title":"NAUTI ClearPass"},{"location":"sources/nauti-clearpass/#nauti-collection-model-compatibility","text":"Name Fetch Add Update Delete devices","title":"NAUTI Collection Model Compatibility"},{"location":"sources/nauti-clearpass/#configuration","text":"As mentioned within Architecture the nauti-clearpass package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [clearpass.default] url = \"$CLEARPASS_ADDR\" credentials . client_id = \"$CLEARPASS_CLIENT_ID\" credentials . client_secret = \"$CLEARPASS_CLIENT_SECRET\" options . timeout = 60 [clearpass.vars] tacacs_secret = \"$TACACS_SECRET\" Source Code : https://github.com/nauti-netdev/nauti-clearpass","title":"Configuration"},{"location":"sources/nauti-ipfabric/","text":"NAUTI IPFabric IPFabric helps companies discover, verify, visualize and document large scale networks within minutes. Due to the nature of IPFabric dynamically discovering devices and information about a network it is only used within NAUTI as an Origin . NAUTI Collection Model Compatibility Name Fetch Add Update Delete devices interfaces ipaddrs portchans sites Configuration As mentioned within Architecture the nauti-ipfabric package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [ipfabric.default] url = \"$IPF_ADDR\" credentials . token = \"$IPF_TOKEN\" [ipfabric.expands.interface] # ------------------------------------------------------------------------- # map IP Fabric \"short interface name\" to \"long interface name\" # ------------------------------------------------------------------------ \"Et\" = \"Ethernet\" \"Lo\" = \"Loopback\" \"Vl\" = \"Vlan\" \"Po\" = \"Port-Channel\" \"Gi\" = \"GigabitEthernet\" \"Te\" = \"TenGigabitEthernet\" \"Vx\" = \"VxLan\" Filtering nauti-ipfabric supports API filtering using a simple filter language within the aio-ipfabric library. This can be used to filter on IPFabric columns such as hostname ~ b15 which will filter out devices containing b15 . For more information check out the aio-ipfabric filter documentation Source Code : https://github.com/nauti-netdev/nauti-ipfabric","title":"nauti-ipfabric"},{"location":"sources/nauti-ipfabric/#nauti-ipfabric","text":"IPFabric helps companies discover, verify, visualize and document large scale networks within minutes. Due to the nature of IPFabric dynamically discovering devices and information about a network it is only used within NAUTI as an Origin .","title":"NAUTI IPFabric"},{"location":"sources/nauti-ipfabric/#nauti-collection-model-compatibility","text":"Name Fetch Add Update Delete devices interfaces ipaddrs portchans sites","title":"NAUTI Collection Model Compatibility"},{"location":"sources/nauti-ipfabric/#configuration","text":"As mentioned within Architecture the nauti-ipfabric package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [ipfabric.default] url = \"$IPF_ADDR\" credentials . token = \"$IPF_TOKEN\" [ipfabric.expands.interface] # ------------------------------------------------------------------------- # map IP Fabric \"short interface name\" to \"long interface name\" # ------------------------------------------------------------------------ \"Et\" = \"Ethernet\" \"Lo\" = \"Loopback\" \"Vl\" = \"Vlan\" \"Po\" = \"Port-Channel\" \"Gi\" = \"GigabitEthernet\" \"Te\" = \"TenGigabitEthernet\" \"Vx\" = \"VxLan\"","title":"Configuration"},{"location":"sources/nauti-ipfabric/#filtering","text":"nauti-ipfabric supports API filtering using a simple filter language within the aio-ipfabric library. This can be used to filter on IPFabric columns such as hostname ~ b15 which will filter out devices containing b15 . For more information check out the aio-ipfabric filter documentation Source Code : https://github.com/nauti-netdev/nauti-ipfabric","title":"Filtering"},{"location":"sources/nauti-netbox/","text":"NAUTI NetBox NetBox is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. NAUTI Netbox can be used as either an Origin or Target . NAUTI Collection Model Compatibility Name Fetch Add Update Delete devices interfaces ipaddrs portchans sites Configuration As mentioned within Architecture the nauti-netbox package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [netbox.default] url = \"$NETBOX_ADDR\" credentials . token = \"$NETBOX_TOKEN\" options . timeout = 60 Filtering nauti-netbox supports API filtering using the Netbox Rest API filtering technique. Information regarding the filters can be found within the Netbox documentation . Source Code : https://github.com/nauti-netdev/nauti-netbox","title":"nauti-netbox"},{"location":"sources/nauti-netbox/#nauti-netbox","text":"NetBox is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. NAUTI Netbox can be used as either an Origin or Target .","title":"NAUTI NetBox"},{"location":"sources/nauti-netbox/#nauti-collection-model-compatibility","text":"Name Fetch Add Update Delete devices interfaces ipaddrs portchans sites","title":"NAUTI Collection Model Compatibility"},{"location":"sources/nauti-netbox/#configuration","text":"As mentioned within Architecture the nauti-netbox package requires a configuration file to function correctly. Environment variables can be used to hide credentials. [netbox.default] url = \"$NETBOX_ADDR\" credentials . token = \"$NETBOX_TOKEN\" options . timeout = 60","title":"Configuration"},{"location":"sources/nauti-netbox/#filtering","text":"nauti-netbox supports API filtering using the Netbox Rest API filtering technique. Information regarding the filters can be found within the Netbox documentation . Source Code : https://github.com/nauti-netdev/nauti-netbox","title":"Filtering"}]}